/*
Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]
*/
vector<vector<string>> partition(string s) {
  vector<vector<string> > result;
  if(s.empty()) return result;
  vector<string> temp;
  dfs(result, temp, s, 0);
  return result;
}
void dfs(vector<vector<string> > &result, vector<string> temp, string s, int start){
  if(start==s.size()){
    result.push_back(temp);
    return;
  }
  for(int i=start;i+start<s.size();i++){
    if(isPalin(s,start,i)){
      temp.push_back(s.substr(start,i-start+1));
      dfs(result, temp, s, i+1);
      temp.pop_back();
    }
  }
}
bool isPalin (string s, int start, int end){
  while(start!=end){
    if(s[start]!=s[end])
      return false;
    else{
      start++;
      end--;
      }
  }
  return true;
}
