/*
Numbers can be regarded as product of its factors. For example,
8 = 2 x 2 x 2;
  = 2 x 4.
Write a function that takes an integer n and return all possible combinations of its factors.
Note: 
Each combination's factors must be sorted ascending, for example: The factors of 2 and 6 is [2, 6], not [6, 2].
You may assume that n is always positive.
Factors should be greater than 1 and less than n.
Examples: 
input: 1
output: 
[]
input: 37
output: 
[]
input: 12
output:
[
  [2, 6],
  [2, 2, 3],
  [3, 4]
]
*/
void factorHelper(vector<vector<int> > &result, vector<int> &temp, int n){
  int i=row.empty()?2:row.back();
  for(;i<=n/i;++i){
    if(n%i==0){
      row.push_back(i);
      row.push_back(n/i);
      result.push_back(row);
      row.pop_back();
      factorHelper(result,row,n/i);
      row.pop_back();
    }
  }
}
vector<vector<int>> getFactors(int n) {
  vector<vector<int> > result;
  vector<int> row;
  factorHelper(result, row, n);
  return result;
}
