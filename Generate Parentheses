/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"
*/
class Solution {
public:
  void generateParenthe(int n, vector<string> &result, int pos, int neg,string temp){
    if(pos<neg) return;
    if(pos+neg==n*2){
      if(pos==neg){
      result.push_back(temp);
    }
    return;
    }
    generateParenthe(n,result,pos+1,neg,temp+'(');
    generateParenthe(n,result,pos,neg+1,temp+')');
  }
  vector<string> generateParenthesis(int n){
    vector<string> result;
    generateParenthe(n,result,0,0,"");
    return result;
  }
};
