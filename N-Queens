/*
Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]
*/
   void backTracking(vector<vector<string>>& ans, vector<string>& ret, int cur, int &n) {
        if (cur==n) { ans.push_back(ret); return;}
        for (int i = 0; i < n; ++i) {
            ret[cur][i] = 'Q';
            int ok = 1;
            for (int j = 0; j < cur; ++j) {
                if (ret[j][i]=='Q' || (j-cur+i>=0 && ret[j][j-cur+i]=='Q') || (cur+i-j<n && ret[j][cur+i-j]=='Q')) { 
                    ok = 0;
                    break;
                }
            }
            if (ok) {
                backTracking(ans, ret, cur+1, n);
            }
        ret[cur][i] = '.';
        }
        return;
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        if (n<1) return ans;
        vector<string> ret;
        for (int i = 0; i < n; ++i)
        {
            string s(n, '.');
            ret.push_back(s);
        }
        backTracking(ans, ret, 0, n);
        return ans;
    }
