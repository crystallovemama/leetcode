/*
Given a collection of numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/
void permuteHelper(vector<vector <int> > &result, vector<int> temp, vector<bool> visit, vector<int> &num){
  if(temp.size() == num.size()){
    result.push_back(temp);
  }
  else{
    for(int i = 0;i < num.size(); i++){
      if(!visit){
        temp.push_back(num[i]);
        visit[i] = true;
        permuteHelper(result, temp, visit, num);
        visit[i] = false;
        temp.pop_back();
      }
    }
  }
}
vector<vector<int> > permute(vector<int> &num) {
  vector<vector <int> > result;
  vector<int> temp;
  vector<bool> visit(num.size(), false);
  permuteHelper(result, temp, num, visit);
  return result;
}
